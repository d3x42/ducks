{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","factory","deps","useState","ducksData","setDucksData","ducksRetentionData","setDucksRetentionData","useEffect","fetch","method","headers","then","response","json","ducks","catch","e","console","error","ducksByColors","useMemo","agr","reduce","res","item","color","labels","Object","keys","values","ducksRetention","dataItem","push","label","percent","leftCi","ci","rightCi","className","data","x","map","location","y","age","type","name","histfunc","layout","width","height","title","line","marker","mode","fill","fillcolor","lat","lon","showlegend","geo","resolution","showland","showlakes","landcolor","countrycolor","lakecolor","projection","coastlinewidth","lataxis","range","showgrid","tickmode","dtick","lonaxis","z","mapbox","style","center","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b6ad992.chunk.js","sourcesContent":["import './App.css';\nimport {useEffect, useMemo, useState} from 'react';\nimport Plot from 'react-plotly.js';\n\nfunction App(factory, deps) {\n  const [ducksData, setDucksData] = useState([]);\n  const [ducksRetentionData, setDucksRetentionData] = useState([]);\n\n  useEffect(\n    () => {\n      fetch('./ducks.json',{\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(response => response.json())\n        .then(ducks => setDucksData(ducks))\n        .catch(e => {\n          setDucksData([]);\n          console.error(e)\n        })\n    },\n    []\n  );\n\n  useEffect(\n    () => {\n      fetch('./ducks-retention.json',{\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(response => response.json())\n        .then(ducks => setDucksRetentionData(ducks))\n        .catch(e => {\n          setDucksRetentionData([]);\n          console.error(e)\n        })\n    },\n    []\n  );\n\n  const ducksByColors = useMemo(\n    () => {\n      const agr = ducksData.reduce(\n        (res, item) => {\n          res[item.color] = res[item.color] ? res[item.color] + 1 : 1;\n          return res;\n        },\n        {}\n      );\n      return {\n        labels: Object.keys(agr),\n        values: Object.values(agr)\n      }\n    },\n    [ducksData]\n  );\n\n  const ducksRetention = useMemo(\n    () => ducksRetentionData.reduce(\n      (res, dataItem) => {\n        res.labels.push(dataItem.label);\n        res.values.push(dataItem.percent);\n        res.leftCi.push(dataItem.ci[0]);\n        res.rightCi.push(dataItem.ci[1]);\n        return res;\n      },\n      {\n        labels: [],\n        values: [],\n        leftCi: [],\n        rightCi: []\n      }\n    ),\n    [ducksRetentionData]\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App_item\">\n        <Plot\n          data={[\n            {\n              x: ducksData.map(dataItem => dataItem.location),\n              y: ducksData.map(dataItem => dataItem.age),\n              type: \"histogram\",\n              name: \"age\",\n              histfunc: \"avg\"\n            }\n          ]}\n          layout={ {width: 400, height: 350, title: 'Avg ducks age by country'} }\n        />\n      </div>\n      <div className=\"App_item\">\n        <Plot\n          data={[\n            {\n              values: ducksByColors.values,\n              labels: ducksByColors.labels,\n              type: 'pie'\n            }\n          ]}\n          layout={ {width: 350, height: 350, title: 'Duck by colors'} }\n        />\n      </div>\n      <div className=\"App_item\">\n        <Plot\n          data={[\n            {\n              x: ducksRetention.labels,\n              y: ducksRetention.values,\n              line: {width: 1},\n              marker: {color: \"blue\"},\n              mode: \"lines\",\n              name: \"Average percent\",\n              type: \"scatter\"\n            }, {\n              x: ducksRetention.labels,\n              y: ducksRetention.leftCi,\n              fill: \"tonexty\",\n              fillcolor: \"rgba(68, 68, 68, 0.3)\",\n              line: {color: \"transparent\"},\n              mode: \"lines\",\n              name: \"Left confidence interval\",\n              type: \"scatter\"\n            }, {\n              x: ducksRetention.labels,\n              y: ducksRetention.rightCi,\n              fill: \"tonexty\",\n              fillcolor: \"rgba(68, 68, 68, 0.3)\",\n              line: {color: \"transparent\"},\n              mode: \"lines\",\n              name: \"Right confidence interval\",\n              type: \"scatter\"\n            }\n          ]}\n          layout={ {width: 600, height: 350, title: 'Duck retention in NY 2021 with zero week 1 - 7 March'} }\n        />\n      </div>\n      <div className=\"App_item\">\n        <Plot\n          data={[{\n            type: 'scattergeo',\n            lat: [ 40.7127, 51.5072 ],\n            lon: [ -74.0059, 0.1275 ],\n            mode: 'lines',\n            line:{\n              width: 2,\n              color: 'red'\n            }\n          }]}\n          layout={{\n            title: 'Yellow ducks migration path from NY to London',\n            width: 700,\n            height: 350,\n            showlegend: false,\n            geo: {\n              resolution: 50,\n              showland: true,\n              showlakes: true,\n              landcolor: 'rgb(204, 204, 204)',\n              countrycolor: 'rgb(204, 204, 204)',\n              lakecolor: 'rgb(255, 255, 255)',\n              projection: {\n                type: 'equirectangular'\n              },\n              coastlinewidth: 2,\n              lataxis: {\n                range: [ 20, 60 ],\n                showgrid: true,\n                tickmode: 'linear',\n                dtick: 10\n              },\n              lonaxis:{\n                range: [-100, 20],\n                showgrid: true,\n                tickmode: 'linear',\n                dtick: 20\n              }\n            }\n          }}\n        />\n      </div>\n      <div className=\"App_item\">\n        <Plot\n          data={[{type: 'densitymapbox', lat: [51,\t40.731], lon: [-0.11, -73.935], z: [10, 5]}]}\n          layout={\n            {\n              width: 600,\n              height: 350,\n              mapbox: {style: 'stamen-terrain', center: {lat: 51, lon: 0}},\n              title: 'Ducks heatmap in UK after migration'\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}